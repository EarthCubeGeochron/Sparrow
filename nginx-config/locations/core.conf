location /data/ {
  # Data file requests can only be routed to by requests from the same server.
  # This allows us to control access but still provide links to data files if
  # requested by the application.
  internal;
  rewrite ^/data/(.*) /$1 break;
  root /data/;
}

location /assets {
    rewrite ^/assets/(.*) /$1 break;
    root /frontend/;
}

location /api/ {
  # == DNS and proxy configuration to keep server ====
  # == alive even if upstream docker container dies ==
  # We used to have 
  #   proxy_pass http://backend:5000/api/;
  # here, which worked fine, but it prevented the gateway server from coming online
  # if there was a problem with the backend. Using the $upstream variable is a workaround.
  # for this, as it makes NGINX decide that it can resolve the backend using DNS
  # from a "remote" server.
  #
  # Unfortunately, this DNS approach seems to be incompatible with the
  # rewriting approach previously used to remove the /api/ prefix before
  # sending to the backend. I wasn't able to figure out how to rewrite 
  # the URLs using other directives, but I was lucky to find the `--root-route`
  # option in Hypercorn (our ASGI server in Python). So this approach hinges on
  # the Python application being served at the /api prefix.
  # -- Daven Quinn, 2022-06-06
  resolver 127.0.0.11 valid=30s; # Docker's DNS server
  set $upstream http://backend:5000;
  proxy_pass $upstream;
  
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection 'Upgrade';
  proxy_set_header Host $host;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_cache_bypass $http_upgrade;
  proxy_connect_timeout       300;
  proxy_send_timeout          300;
  proxy_read_timeout          300;
  send_timeout                300;

  # Open CORS config
  # https://gist.github.com/michiel/1064640
  if ($request_method = 'OPTIONS') {
    add_header 'Access-Control-Allow-Origin' '*';
    # Om nom nom cookies
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    # Custom headers and headers various browsers *should* be OK with but aren't
    add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
    # Tell client that this pre-flight info is valid for 20 days
    add_header 'Access-Control-Max-Age' 1728000;
    add_header 'Content-Type' 'text/plain charset=UTF-8';
    add_header 'Content-Length' 0;
    return 204;
  }

  if ($request_method = 'POST') {
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
  }

  if ($request_method = 'GET') {
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
  }
}

# Error Pages
error_page 500 502 503 504 /error/50x.html;
location /error/ {
  root /usr/share/nginx/error-pages/;
  internal;
}

location /api/v3/ {
  resolver 127.0.0.11 valid=30s; # Docker's DNS server
  set $upstream http://api:3000;
  proxy_pass $upstream;
  
  proxy_http_version 1.1;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection 'Upgrade';
  proxy_set_header Host $host;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_cache_bypass $http_upgrade;
  proxy_connect_timeout       300;
  proxy_send_timeout          300;
  proxy_read_timeout          300;
  send_timeout                300;
}