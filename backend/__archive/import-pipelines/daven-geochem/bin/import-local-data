#!/usr/bin/env python -W ignore
"""
Import script to load detrital zircon data for the Naukluft Nappe Complex, Namibia
directly from the local project-specific PostgreSQL database on `daven-quinn.local`.
"""

from sqlalchemy import create_engine
from subprocess import run
from sparrow.util import run_query, run_sql_file, working_directory
import click
from click import secho
from os import path
from periodictable import elements
from pandas import DataFrame

dest = create_engine("postgresql:///earthcube_labdata")

def port_table(sourcedb, table_name, query=None):
    if query is None:
        query = "SELECT * FROM "+table_name
    print(table_name)
    df = run_query(sourcedb, query)
    try:
        df.to_sql(table_name, dest, schema='test_data')
    except ValueError:
        secho("Table exists", fg="yellow")


def create_elements_table(*args, **kwargs):
    def process_elements():
        for el in list(elements)[1:]:
            yield dict(
                symbol=el.symbol,
                mass=el.mass,
                number=el.number,
                name=el.name)
    try:
        df = DataFrame.from_records(process_elements(), index='number')
        df.to_sql(*args,**kwargs)
    except:
        pass

# Kinda ridiculous way to get path to directory one below script
base_dir = path.abspath(path.join(path.dirname(path.realpath(__file__)),'..'))

@click.command()
@click.option("--port",is_flag=True,default=False)
def cli(port=False):
    """
    Import data from local databases
    """
    if port:
        source = create_engine("postgresql:///Naukluft")
        port_table(source, 'detrital_zircon')

        source = create_engine("postgresql:///xenoliths_flask")
        port_table(source, 'probe_datum')

        with working_directory(base_dir):
            port_table(source, 'probe_measurement',
                   query='sql/get-probe-measurements.sql')

        port_table(source, 'probe_session')

        port_table(source, 'sims_datum')
        port_table(source, 'sims_measurement')

    # Run SQL to reset database
    run(["labdata", "init", "--drop"])

    # Create temp table of elements as a helper
    create_elements_table("element", dest, schema='vocabulary')

    # Start inserting data
    with working_directory(base_dir):
        run_sql_file(dest, "sql/create-schema.sql")
        run_sql_file(dest, "sql/normalize-sims-measurements.sql")
        run_sql_file(dest, "sql/normalize-probe-measurements.sql")
        run_sql_file(dest, "sql/normalize-dz-measurements.sql")
        run_sql_file(dest, "sql/create-views.sql")


cli()
