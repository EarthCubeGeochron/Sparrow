"""
Sparrow's task manager provides a way to run long-running processes
(e.g., imports), within the context of a Sparrow application.

Tasks have

- Unique names
- Autogenerated command-line applications (if desired)
- Celery task representation
- Optional stdout redirection

"""
from celery import Task, Celery
from sparrow.logs import get_logger
from sparrow.plugins import SparrowCorePlugin
from sparrow.context import get_plugin
from sparrow.settings import TASK_BROKER
import typer
from .task_api import TasksAPI

log = get_logger(__name__)


class SparrowTaskError(Exception):
    ...


_tasks_to_register = {}


class SparrowTaskManager(SparrowCorePlugin):
    name = "task-manager"
    celery: Celery

    _cli_app = typer.Typer()
    _task_commands = []
    _tasks = {}

    def __init__(self, app):
        self.celery = Celery("tasks", broker=TASK_BROKER)
        super().__init__(app)

    def register_task(self, func, *args, **kwargs):
        # Get plugin name
        name = kwargs.get("name", func.__name__)
        destructive = kwargs.get("destructive", False)
        cli_only = kwargs.get("cli_only", False)
        if destructive:
            cli_only = True

        self._cli_app.command(name=name)(func)
        if not cli_only:
            self.celery.task(*args, **kwargs)(func)

        self._task_commands.append(name)
        log.debug(f"Registering task {name}")

        func._is_sparrow_task = True
        self._tasks[name] = func
        return func

    def get_task(self, name):
        return self._tasks[name]

    def on_plugins_initialized(self):
        global _tasks_to_register
        for k, v in _tasks_to_register.items():
            (func, args, kwargs) = v
            kwargs["name"] = k
            self.register_task(func, *args, **kwargs)
        _tasks_to_register = {}

    def on_setup_cli(self, cli):
        self._cli_app._add_completion = False
        typer_click_object = typer.main.get_command(self._cli_app)
        cli.add_command(typer_click_object, "tasks")

    def on_api_initialized_v2(self, api):
        api.mount("/tasks", TasksAPI, name="tasks")


class SparrowTask(Task):
    def __call__(self, *args, **kwargs):
        """In a celery task this function calls the run method, here you can
        set some environment variable before the run of the task"""
        return self.run(*args, **kwargs)

    def after_return(self, status, retval, task_id, args, kwargs, einfo):
        # exit point of the task whatever is the state
        pass


def sparrow_task(*args, **kwargs):
    """A decorator to define a sparrow task."""
    kwargs.setdefault("base", SparrowTask)

    def wrapper(func):
        task_name = kwargs.get("name", func.__name__)
        try:
            mgr = get_plugin("task-manager")
            mgr.register_task(func, *args, **kwargs)
        except (ImportError, AttributeError, ValueError):
            _tasks_to_register[task_name] = (func, args, kwargs)

        def _run_task(*args, **kwargs):
            """Function to run a task that is already registered to the running Sparrow application."""
            mgr = get_plugin("task-manager")
            func = mgr.get_task(task_name)
            return func(*args, **kwargs)

        return _run_task

    return wrapper
