"""
Sparrow's task manager provides a way to run long-running processes
(e.g., imports), within the context of a Sparrow application.

Tasks have

- Unique names
- Autogenerated command-line applications (if desired)
- Celery task representation
- Optional stdout redirection

"""
from sparrow.plugins import SparrowCorePlugin
from celery import Task, Celery
from sparrow.logs import get_logger
from click import echo
from sparrow.plugins import SparrowCorePlugin
from sparrow.context import get_sparrow_app
import typer

log = get_logger(__name__)

celery = Celery("tasks", broker="redis://broker//")


class SparrowTaskError(Exception):
    ...


class SparrowTaskManager(SparrowCorePlugin):
    name = "task-manager"
    celery: Celery

    def __init__(self):
        self.celery = celery

    def __call__(self, fn):
        pass


class SparrowTask(Task):
    def __call__(self, *args, **kwargs):
        """In celery task this function call the run method, here you can
        set some environment variable before the run of the task"""
        return self.run(*args, **kwargs)

    def after_return(self, status, retval, task_id, args, kwargs, einfo):
        # exit point of the task whatever is the state
        pass


log = get_logger(__name__)

cli_app = typer.Typer()
_typer_commands = []


def sparrow_task(*args, **kwargs):
    kwargs.setdefault("base", SparrowTask)

    def wrapper(func):
        # app = get_sparrow_app()
        # if mgr is None:
        #    raise SparrowTaskError("Cannot find task manager")

        # Get plugin name
        name = kwargs.get("name", func.__name__)
        # Apply decorators

        # mgr = app.plugins.get("task-manager")
        func = celery.task(*args, **kwargs)(func)
        func = cli_app.command(name=name)(func)

        _typer_commands.append(name)
        log.debug(f"Registering task {name}")

        # typer_click_object = typer.main.get_command(cli_app)
        # if plugin is not None:
        #     typer_click_object._plugin = plugin.name

        # from sparrow.cli import cli

        # cli.add_command(typer_click_object, name)

        return func

    return wrapper


@sparrow_task(name="hello")
def hello_task(name: str):
    """Say hello!"""
    echo(f"Hello {name}")


def add_typer_commands(cli):
    typer_click_object = typer.main.get_command(cli_app)
    for name in _typer_commands:
        cli.add_command(typer_click_object, name)
